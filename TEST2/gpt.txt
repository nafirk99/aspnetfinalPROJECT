using DevSkill.Inventory.Domain.Entities;
using DevSkill.Inventory.Infrastructutre;
using DevSkill.Inventory.Web.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using X.PagedList;
using X.PagedList.Extensions;
using OfficeOpenXml;
using Microsoft.AspNetCore.Authorization;
using DevSkill.Inventory.Web.Models;

namespace DevSkill.Inventory.Web.Areas.Admin.Controllers
{
    [Area("Admin"), Authorize]   // Only admin in all   //[Area("Admin"), Authorize("Admin")]
    public class ProductsaController : Controller
    {
        private readonly InventoryDbContext _context;
        private readonly IWebHostEnvironment _environment;

        public ProductsaController(InventoryDbContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }

        // Main Dashboard For EZO
        [Authorize(Roles = "Admin")]
        public IActionResult Dashboarda()
        {
            var dashboardData = new DashboardViewModel
            {
                ProductCount =  _context.Productsa.Count(),
                CategoryCount =  _context.Categories.Count(),
                VendorCount =  _context.Vendors.Count(),
                GroupCount =  _context.Groups.Count(),
                LocationCount =  _context.Locations.Count(),
                AllAssetPrice = _context.Productsa.Sum(p => p.Price),
                TotalQuantity = _context.Productsa.Sum(t => t.TotalQuantity),
                AvailableQuantity = _context.Productsa.Sum(a => a.AvailableQuantity)
            };
            //var p = _context.Productsa.Sum(a => a.TotalQuantity);
            return View(dashboardData);
        }
        // Index With Data Table (NEW)
        public IActionResult Index(string categoryFilter, string vendorFilter, string groupFilter, string locationFilter, string nameFilter, string dateFilter)
        {
            var categories = _context.Categories.ToList();
            var vendors = _context.Vendors.ToList();
            var groups = _context.Groups.ToList();
            var location = _context.Locations.ToList();

            ViewData["Categories"] = categories;
            ViewData["Vendors"] = vendors;
            ViewData["Groups"] = groups;
            ViewData["Locations"] = location;

            var products = _context.Productsa.AsQueryable();

            // Apply category filter
            if (!string.IsNullOrEmpty(categoryFilter))
            {
                if (int.TryParse(categoryFilter, out var categoryId))
                {
                    products = products.Where(p => p.CategoryId == categoryId);
                }
            }

            // Apply vendor filter
            if (!string.IsNullOrEmpty(vendorFilter))
            {
                if (int.TryParse(vendorFilter, out var vendorId))
                {
                    products = products.Where(p => p.VendorId == vendorId);
                }
            }

            // Apply group filter
            if (!string.IsNullOrEmpty(groupFilter))
            {
                if (int.TryParse(groupFilter, out var groupId))
                {
                    products = products.Where(p => p.GroupId == groupId);
                }
            }

            // Apply location filter
            if (!string.IsNullOrEmpty(locationFilter))
            {
                //products = products.Where(p => p.LocationId.Contains(locationFilter));
                //products = products.Where(p => p.LocationId ==  );
                if (int.TryParse(locationFilter, out var locationId))
                {
                    products = products.Where(p => p.LocationId == locationId );
                }
            }

            // Apply name filter
            if (!string.IsNullOrEmpty(nameFilter))
            {
                products = products.Where(p => p.Name.Contains(nameFilter));
            }

            // Apply date filter
            if (!string.IsNullOrEmpty(dateFilter))
            {
                if (DateTime.TryParse(dateFilter, out var parsedDate))
                {
                    products = products.Where(p => p.CreatedAt.Date == parsedDate.Date);
                }
            }

            return View(products.ToList());
        }

        // New AssetStockIndex(With Data Table)
        public IActionResult AssetStockIndex()
        {
            // Retrieve All the Products
            var products = _context.Productsa
                .Include(p => p.Category)
                .Include(v => v.Vendor)
                .Include(g => g.Group)
                .Include(l => l.Location).AsQueryable();
            return View(products);
        }





        // GET: Products/Create
        public IActionResult Create()
        {
            ViewBag.Categories = _context.Categories.ToList();
            //New Code
            ViewBag.Vendors = _context.Vendors.ToList();
            ViewBag.Groups = _context.Groups.ToList();
            ViewBag.Locations = _context.Locations.ToList();

            return View();
        }



        // GET: Products/Edit/{id}
        public IActionResult Edit(int id)
        {
            var product = _context.Productsa.Find(id);
            if (product == null)
            {
                return NotFound();
            }

            var productDTO = new ProductDTO
            {
                Name = product.Name,
                Brand = product.Brand,
                Price = product.Price,
                Description = product.Description,
                AIN = product.AIN,
                CreatedBy = product.CreatedBy,
                VendorId = product.VendorId,
                GroupId = product.GroupId,
                CategoryId = product.CategoryId,
                LocationId = product.LocationId,
                TotalQuantity = product.TotalQuantity,
                ModelNumber = product.ModelNumber,
                AvailableQuantity= product.AvailableQuantity,
                StockPrice= product.StockPrice
            };

            ViewData["ProductId"] = product.Id;
            ViewData["ImageFileName"] = product.ImageFileName;
            ViewData["CreatedAt"] = product.CreatedAt;

            ViewBag.Categories = _context.Categories.ToList();
            // New Code
            ViewBag.Vendors = _context.Vendors.ToList();
            ViewBag.Groups = _context.Groups.ToList();
            ViewBag.Locations = _context.Locations.ToList();
            return View(productDTO);
        }

        // POST: Products/Edit/{id}
        [HttpPost]
        public IActionResult Edit(int id, ProductDTO productDTO)
        {
            var product = _context.Productsa.Find(id);
            if (product == null)
            {
                return NotFound();
            }


            if (!ModelState.IsValid)
            {
                ViewBag.Categories = _context.Categories.ToList();
                // New Code
                ViewBag.Vendors = _context.Vendors.ToList();
                ViewBag.Groups = _context.Groups.ToList();
                ViewBag.Locations = _context.Locations.ToList();
                return View(productDTO);
            }

            //-------------
            if (!ModelState.IsValid)
            {
                ViewData["ProductId"] = product.Id;
                ViewData["ImageFileName"] = product.ImageFileName;
                ViewData["CreatedAt"] = product.CreatedAt;
                return View(productDTO);
            }

            //-------------------
            // Update the image file if we have a new image file
            string newFileName = product.ImageFileName;
            if (productDTO.ImageFile != null)
            {
                newFileName = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                newFileName += Path.GetExtension(productDTO.ImageFile!.FileName);

                string imageFullPath = _environment.WebRootPath + "/Products/" + newFileName;
                using (var stream = System.IO.File.Create(imageFullPath))
                {
                    productDTO.ImageFile.CopyTo(stream);
                }


                //Delete Old Image
                string oldImageFullPath = _environment.WebRootPath + "/Products" + product.ImageFileName;
                System.IO.File.Delete(oldImageFullPath);
            }





            product.Name = productDTO.Name;
            product.Brand = productDTO.Brand;
            product.Price = productDTO.Price;
            product.Description = productDTO.Description;
            product.AIN = productDTO.AIN;
            product.CreatedBy = productDTO.CreatedBy;
            product.VendorId = productDTO.VendorId;
            product.GroupId = productDTO.GroupId;
            product.CategoryId = productDTO.CategoryId;
            product.ImageFileName = newFileName;
            product.LocationId = productDTO.LocationId;
            product.TotalQuantity = productDTO.TotalQuantity;
            product.ModelNumber = productDTO.ModelNumber;
            product.AvailableQuantity = productDTO.AvailableQuantity;
            product.StockPrice = productDTO.StockPrice;

            _context.SaveChanges();
            return RedirectToAction(nameof(Index));
        }

        // GET: Products/Delete/{id}
        public IActionResult Delete(int id)
        {
            var product = _context.Productsa.Find(id);
            if (product == null)
            {
                return NotFound();
            }

            _context.Productsa.Remove(product);
            _context.SaveChanges();

            return RedirectToAction(nameof(Index));
        }





 



        // POST: Products/Create
        [HttpPost]
        public IActionResult AssetStockCreate(ProductDTO productDTO)
        {

            if (productDTO.ImageFile == null)
            {
                ModelState.AddModelError("ImageFile", "The Image File Is Required");
            }

            if (!ModelState.IsValid)
            {
                return View(productDTO);
            }


            if (!ModelState.IsValid)
            {
                ViewBag.Categories = _context.Categories.ToList();

                // New Code
                ViewBag.Vendors = _context.Vendors.ToList();
                ViewBag.Groups = _context.Groups.ToList();
                ViewBag.Locations = _context.Locations.ToList();
                return View(productDTO);
            }

            // Save image logic here (same as before)
            //Save The Image
            string newFileName = DateTime.Now.ToString("yyyyMMddHHmmssfff");
            newFileName += Path.GetExtension(productDTO.ImageFile!.FileName);

            string imageFullPath = _environment.WebRootPath + "/Products/" + newFileName;
            using (var stream = System.IO.File.Create(imageFullPath))
            {
                productDTO.ImageFile.CopyTo(stream);
            }



            var product = new Producta
            {
                Name = productDTO.Name,
                Brand = productDTO.Brand,
                Price = productDTO.Price,
                Description = productDTO.Description,
                AIN = productDTO.AIN,
                CreatedBy = productDTO.CreatedBy,
                VendorId = productDTO.VendorId,           // Assign vendor
                GroupId = productDTO.GroupId,            // Assign group
                CategoryId = productDTO.CategoryId,     // Assign category
                LocationId = productDTO.LocationId,    // Assign location  
                CreatedAt = DateTime.Now,
                ImageFileName = newFileName,    //-------For Image 
                TotalQuantity = productDTO.TotalQuantity,
                ModelNumber = productDTO.ModelNumber,
                AvailableQuantity = productDTO.AvailableQuantity,
                StockPrice = productDTO.StockPrice
            };

            _context.Productsa.Add(product);
            _context.SaveChanges();

            return RedirectToAction(nameof(AssetStockIndex));
        }




 

        [HttpGet]
        public IActionResult StockAdjustment()
        {
            var model = _context.Productsa
                .Include(p => p.Location)
                .Select(p => new StockAdjustmentViewModel
                {
                    ProductId = p.Id,
                    ProductName = p.Name,
                    LocationId = p.LocationId,
                    LocationName = p.Location.Name,
                    CurrentStock = p.TotalQuantity,
                    AvailableStock = p.AvailableQuantity
                })
                .ToList();

            return View(model);
        }

        [HttpPost]
        public IActionResult AdjustStock(List<StockAdjustmentViewModel> adjustments)
        {
            foreach (var adjustment in adjustments)
            {
                var product = _context.Productsa.Find(adjustment.ProductId);
                if (product != null)
                {
                    if (adjustment.AdjustmentQuantity > 0)
                    {
                        product.TotalQuantity += adjustment.AdjustmentQuantity;
                    }
                    
                    product.AvailableQuantity += adjustment.AdjustmentQuantity;
                }
            }

            _context.SaveChanges();
            return RedirectToAction(nameof(StockOperationSuccess));
            //return RedirectToAction(nameof(Index));
            //return RedirectToAction("StockOperationSuccess");
        }

        public IActionResult StockOperationSuccess()
        {
            return View();
        }


    }
}


Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	RZ1026	Encountered end tag "td" with no matching start tag.  Are your start/end tags properly balanced?	DevSkill.Inventory.Web	E:\ZGit Backup Repositories\z Testing Ground\18 Integrating Stock Transfer (25th Nov)\DevSkill.Inventory\DevSkill.Inventory.Web\Areas\Admin\Views\Productsa\TransferIndex.cshtml	45	

Severity	Code	Description	Project	File	Line	Suppression State
Error (active)	RZ1034	Found a malformed 'form' tag helper. Tag helpers must have a start and end tag or be self closing.	DevSkill.Inventory.Web	E:\ZGit Backup Repositories\z Testing Ground\18 Integrating Stock Transfer (25th Nov)\DevSkill.Inventory\DevSkill.Inventory.Web\Areas\Admin\Views\Productsa\TransferIndex.cshtml	32	

